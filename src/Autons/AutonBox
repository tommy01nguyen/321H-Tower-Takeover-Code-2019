//IMU TESTING
//turnTo(90);
//pros::delay(500);
//turnTo(-90);
// pros::delay(500);
// turnTo(90);

//TESTING MOTION PROFILING
// chassisProfile->generatePath({{0_in, 0_in, 0_deg},  {40_in, 0_in, 0_deg}},"A");
// pros::delay(500);
// chassisProfile->setTarget("A");
// chassisProfile->waitUntilSettled();

//TESTING PID
// pidChassis->setMaxVelocity(160);
// pidChassis->moveDistance(20_in);
// pros::delay(500);
// pidChassis->moveDistance(10_in);

// pidChassis->turnAngle(90_deg);
// pros::delay(500);
// pidChassis->turnAngle(-90_deg);

//
void smallZone5Cube1Row(int side){
  //Starts in 4 cube row, goes forward, picks up the 4 cubes. Goes back and scores. 5 Cubes.
  //First Row
  chassisProfile->generatePath({{0_in, 0_in, 0_deg}, {100_in, 0_in, 0_deg}}, "throughFirstRow");
  //flipout();
  setintakeState(intakeStates::on, 12000);
  pidChassis->setMaxVelocity(100);
  chassisProfile->setTarget("throughFirstRow");
  chassisProfile->generatePath({{0_in, 0_in, 0_deg}, {28_in, 0_in, 0_deg}}, "out of row");
  chassisProfile->waitUntilSettled();
  chassisProfile->removePath("throughFirstRow");
  //pros::delay(200);

  //Back to zone
  pidChassis->setMaxVelocity(200);
  chassisProfile->setTarget("out of row", true);
  chassisProfile->generatePath({{0_in, 0_in, 0_deg}, {25_in, 0_in, 0_deg}}, "to goal zone");
  chassisProfile->waitUntilSettled();
  chassisProfile->removePath("out of row");
  setintakeState(intakeStates::on, 0);
  if(side == red) turnTo(135, 190);
  if(side == blue) turnTo(-135, 190);
  pidChassis->setMaxVelocity(150);
  chassisProfile->setTarget("to goal zone");
  setintakeState(intakeStates::toFrontSensor);
  chassisProfile->waitUntilSettled();
  chassisProfile->removePath("to goal zone");

  //Score in Zone
  intakeStackMacroOn = true;
  setintakeState(intakeStates::readyToStack);
  stackMacroOn = true;
  setstackerState(stackerStates::stackMacro);
  while(stackMacroOn){
    pros::delay(20);
  }

  pidChassis->setMaxVelocity(160);
  setstackerState(stackerStates::toBottom);
  setintakeState(intakeStates::on, -6000);
  pidChassis->moveDistance(-10_in);
}
